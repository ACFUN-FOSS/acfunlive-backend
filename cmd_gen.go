// Code generated by github.com/ACFUN-FOSS/acfunlive-backend/cmd . DO NOT EDIT.
package main

import (
	"fmt"

	"github.com/orzogc/acfundanmu"
	"github.com/segmentio/encoding/json"
	"github.com/valyala/fastjson"
)

func (ac *acLive) getAllLiveList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetAllLiveList()
	if err != nil {
		ac.conn.debug("getAllLiveList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getAllLiveListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getAllLiveList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getAllLiveListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getAllLiveListType, quote(reqID), string(data))
}

func (ac *acLive) getManagerList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetManagerList()
	if err != nil {
		ac.conn.debug("getManagerList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getManagerListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getManagerList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getManagerListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getManagerListType, quote(reqID), string(data))
}

func (ac *acLive) getMedalList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetMedalList()
	if err != nil {
		ac.conn.debug("getMedalList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getMedalList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalListType, quote(reqID), string(data))
}

func (ac *acLive) getLiveTypeList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetLiveTypeList()
	if err != nil {
		ac.conn.debug("getLiveTypeList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLiveTypeListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getLiveTypeList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLiveTypeListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLiveTypeListType, quote(reqID), string(data))
}

func (ac *acLive) getPushConfig(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetPushConfig()
	if err != nil {
		ac.conn.debug("getPushConfig() error: %v", err)
		return fmt.Sprintf(respErrJSON, getPushConfigType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getPushConfig() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getPushConfigType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getPushConfigType, quote(reqID), string(data))
}

func (ac *acLive) getLiveStatus(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetLiveStatus()
	if err != nil {
		ac.conn.debug("getLiveStatus() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLiveStatusType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getLiveStatus() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLiveStatusType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLiveStatusType, quote(reqID), string(data))
}

func (ac *acLive) cancelWearMedal(v *fastjson.Value, reqID string) string {
	err := ac.ac.CancelWearMedal()
	if err != nil {
		ac.conn.debug("cancelWearMedal() error: %v", err)
		return fmt.Sprintf(respErrJSON, cancelWearMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, cancelWearMedalType, quote(reqID))
}

func (ac *acLive) getWatchingList(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("getWatchingList() error: No liveID")
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetWatchingList(liveID)
	if err != nil {
		ac.conn.debug("getWatchingList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getWatchingList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getWatchingListType, quote(reqID), string(data))
}

func (ac *acLive) getSummary(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("getSummary() error: No liveID")
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetSummary(liveID)
	if err != nil {
		ac.conn.debug("getSummary() error: %v", err)
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getSummary() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getSummaryType, quote(reqID), string(data))
}

func (ac *acLive) getLuckList(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("getLuckList() error: No liveID")
		return fmt.Sprintf(respErrJSON, getLuckListType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	redpackID := string(v.GetStringBytes("data", "redpackID"))
	if redpackID == "" {
		ac.conn.debug("getLuckList() error: No redpackID")
		return fmt.Sprintf(respErrJSON, getLuckListType, quote(reqID), invalidReqData, quote("Need redpackID"))
	}

	redpackBizUnit := string(v.GetStringBytes("data", "redpackBizUnit"))
	if redpackBizUnit == "" {
		ac.conn.debug("getLuckList() error: No redpackBizUnit")
		return fmt.Sprintf(respErrJSON, getLuckListType, quote(reqID), invalidReqData, quote("Need redpackBizUnit"))
	}

	ret, err := ac.ac.GetLuckList(liveID, redpackID, redpackBizUnit)
	if err != nil {
		ac.conn.debug("getLuckList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLuckListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getLuckList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLuckListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLuckListType, quote(reqID), string(data))
}

func (ac *acLive) getPlayback(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("getPlayback() error: No liveID")
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetPlayback(liveID)
	if err != nil {
		ac.conn.debug("getPlayback() error: %v", err)
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getPlayback() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getPlaybackType, quote(reqID), string(data))
}

func (ac *acLive) getAllKickHistory(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("getAllKickHistory() error: No liveID")
		return fmt.Sprintf(respErrJSON, getAllKickHistoryType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetAllKickHistory(liveID)
	if err != nil {
		ac.conn.debug("getAllKickHistory() error: %v", err)
		return fmt.Sprintf(respErrJSON, getAllKickHistoryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getAllKickHistory() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getAllKickHistoryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getAllKickHistoryType, quote(reqID), string(data))
}

func (ac *acLive) getTranscodeInfo(v *fastjson.Value, reqID string) string {
	streamName := string(v.GetStringBytes("data", "streamName"))
	if streamName == "" {
		ac.conn.debug("getTranscodeInfo() error: No streamName")
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), invalidReqData, quote("Need streamName"))
	}

	ret, err := ac.ac.GetTranscodeInfo(streamName)
	if err != nil {
		ac.conn.debug("getTranscodeInfo() error: %v", err)
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getTranscodeInfo() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getTranscodeInfoType, quote(reqID), string(data))
}

func (ac *acLive) stopLive(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		ac.conn.debug("stopLive() error: No liveID")
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.StopLive(liveID)
	if err != nil {
		ac.conn.debug("stopLive() error: %v", err)
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("stopLive() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, stopLiveType, quote(reqID), string(data))
}

func (ac *acLive) getBillboard(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		ac.conn.debug("getBillboard() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetBillboard(liverUID)
	if err != nil {
		ac.conn.debug("getBillboard() error: %v", err)
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getBillboard() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getBillboardType, quote(reqID), string(data))
}

func (ac *acLive) getUserLiveInfo(v *fastjson.Value, reqID string) string {
	userID := v.GetInt64("data", "userID")
	if userID <= 0 {
		ac.conn.debug("getUserLiveInfo() error: userID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), invalidReqData, quote("userID not exist or less than 1"))
	}

	ret, err := ac.ac.GetUserLiveInfo(userID)
	if err != nil {
		ac.conn.debug("getUserLiveInfo() error: %v", err)
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getUserLiveInfo() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getUserLiveInfoType, quote(reqID), string(data))
}

func (ac *acLive) getUserInfo(v *fastjson.Value, reqID string) string {
	userID := v.GetInt64("data", "userID")
	if userID <= 0 {
		ac.conn.debug("getUserInfo() error: userID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getUserInfoType, quote(reqID), invalidReqData, quote("userID not exist or less than 1"))
	}

	ret, err := ac.ac.GetUserInfo(userID)
	if err != nil {
		ac.conn.debug("getUserInfo() error: %v", err)
		return fmt.Sprintf(respErrJSON, getUserInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getUserInfo() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getUserInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getUserInfoType, quote(reqID), string(data))
}

func (ac *acLive) getMedalDetail(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		ac.conn.debug("getMedalDetail() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetMedalDetail(liverUID)
	if err != nil {
		ac.conn.debug("getMedalDetail() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getMedalDetail() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalDetailType, quote(reqID), string(data))
}

func (ac *acLive) getMedalRankList(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		ac.conn.debug("getMedalRankList() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetMedalRankList(liverUID)
	if err != nil {
		ac.conn.debug("getMedalRankList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getMedalRankList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalRankListType, quote(reqID), string(data))
}

func (ac *acLive) getUserMedal(v *fastjson.Value, reqID string) string {
	userID := v.GetInt64("data", "userID")
	if userID <= 0 {
		ac.conn.debug("getUserMedal() error: userID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), invalidReqData, quote("userID not exist or less than 1"))
	}

	ret, err := acfundanmu.GetUserMedal(userID)
	if err != nil {
		ac.conn.debug("getUserMedal() error: %v", err)
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getUserMedal() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getUserMedalType, quote(reqID), string(data))
}

func (ac *acLive) addManager(v *fastjson.Value, reqID string) string {
	managerUID := v.GetInt64("data", "managerUID")
	if managerUID <= 0 {
		ac.conn.debug("addManager() error: managerUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, addManagerType, quote(reqID), invalidReqData, quote("managerUID not exist or less than 1"))
	}

	err := ac.ac.AddManager(managerUID)
	if err != nil {
		ac.conn.debug("addManager() error: %v", err)
		return fmt.Sprintf(respErrJSON, addManagerType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, addManagerType, quote(reqID))
}

func (ac *acLive) deleteManager(v *fastjson.Value, reqID string) string {
	managerUID := v.GetInt64("data", "managerUID")
	if managerUID <= 0 {
		ac.conn.debug("deleteManager() error: managerUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, deleteManagerType, quote(reqID), invalidReqData, quote("managerUID not exist or less than 1"))
	}

	err := ac.ac.DeleteManager(managerUID)
	if err != nil {
		ac.conn.debug("deleteManager() error: %v", err)
		return fmt.Sprintf(respErrJSON, deleteManagerType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, deleteManagerType, quote(reqID))
}

func (ac *acLive) wearMedal(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		ac.conn.debug("wearMedal() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, wearMedalType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	err := ac.ac.WearMedal(liverUID)
	if err != nil {
		ac.conn.debug("wearMedal() error: %v", err)
		return fmt.Sprintf(respErrJSON, wearMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, wearMedalType, quote(reqID))
}

func (ac *acLive) getLiveData(v *fastjson.Value, reqID string) string {
	days := v.GetInt("data", "days")
	if days <= 0 {
		ac.conn.debug("getLiveData() error: days not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getLiveDataType, quote(reqID), invalidReqData, quote("days not exist or less than 1"))
	}

	ret, err := ac.ac.GetLiveData(days)
	if err != nil {
		ac.conn.debug("getLiveData() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLiveDataType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		ac.conn.debug("getLiveData() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLiveDataType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLiveDataType, quote(reqID), string(data))
}

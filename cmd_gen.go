// Code generated by github.com/ACFUN-FOSS/acfunlive-backend/cmd . DO NOT EDIT.
package main

import (
	"fmt"

	"github.com/orzogc/acfundanmu"
	"github.com/segmentio/encoding/json"
	"github.com/valyala/fastjson"
)

func (ac *acLive) getAllLiveList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetAllLiveList()
	if err != nil {
		debug("getAllLiveList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getAllLiveListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getAllLiveList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getAllLiveListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getAllLiveListType, quote(reqID), string(data))
}

func (ac *acLive) getManagerList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetManagerList()
	if err != nil {
		debug("getManagerList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getManagerListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getManagerList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getManagerListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getManagerListType, quote(reqID), string(data))
}

func (ac *acLive) getLiveTypeList(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetLiveTypeList()
	if err != nil {
		debug("getLiveTypeList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLiveTypeListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getLiveTypeList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLiveTypeListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLiveTypeListType, quote(reqID), string(data))
}

func (ac *acLive) getPushConfig(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetPushConfig()
	if err != nil {
		debug("getPushConfig() error: %v", err)
		return fmt.Sprintf(respErrJSON, getPushConfigType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getPushConfig() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getPushConfigType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getPushConfigType, quote(reqID), string(data))
}

func (ac *acLive) getLiveStatus(v *fastjson.Value, reqID string) string {
	ret, err := ac.ac.GetLiveStatus()
	if err != nil {
		debug("getLiveStatus() error: %v", err)
		return fmt.Sprintf(respErrJSON, getLiveStatusType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getLiveStatus() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getLiveStatusType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getLiveStatusType, quote(reqID), string(data))
}

func (ac *acLive) getWatchingList(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		debug("getWatchingList() error: No liveID")
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetWatchingListWithLiveID(liveID)
	if err != nil {
		debug("getWatchingList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getWatchingList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getWatchingListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getWatchingListType, quote(reqID), string(data))
}

func (ac *acLive) getSummary(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		debug("getSummary() error: No liveID")
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetSummaryWithLiveID(liveID)
	if err != nil {
		debug("getSummary() error: %v", err)
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getSummary() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getSummaryType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getSummaryType, quote(reqID), string(data))
}

func (ac *acLive) getPlayback(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		debug("getPlayback() error: No liveID")
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.GetPlayback(liveID)
	if err != nil {
		debug("getPlayback() error: %v", err)
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getPlayback() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getPlaybackType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getPlaybackType, quote(reqID), string(data))
}

func (ac *acLive) getTranscodeInfo(v *fastjson.Value, reqID string) string {
	streamName := string(v.GetStringBytes("data", "streamName"))
	if streamName == "" {
		debug("getTranscodeInfo() error: No streamName")
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), invalidReqData, quote("Need streamName"))
	}

	ret, err := ac.ac.GetTranscodeInfo(streamName)
	if err != nil {
		debug("getTranscodeInfo() error: %v", err)
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getTranscodeInfo() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getTranscodeInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getTranscodeInfoType, quote(reqID), string(data))
}

func (ac *acLive) stopLive(v *fastjson.Value, reqID string) string {
	liveID := string(v.GetStringBytes("data", "liveID"))
	if liveID == "" {
		debug("stopLive() error: No liveID")
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), invalidReqData, quote("Need liveID"))
	}

	ret, err := ac.ac.StopLive(liveID)
	if err != nil {
		debug("stopLive() error: %v", err)
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("stopLive() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, stopLiveType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, stopLiveType, quote(reqID), string(data))
}

func (ac *acLive) getBillboard(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		debug("getBillboard() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetBillboard(liverUID)
	if err != nil {
		debug("getBillboard() error: %v", err)
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getBillboard() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getBillboardType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getBillboardType, quote(reqID), string(data))
}

func (ac *acLive) getUserLiveInfo(v *fastjson.Value, reqID string) string {
	userID := v.GetInt64("data", "userID")
	if userID <= 0 {
		debug("getUserLiveInfo() error: userID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), invalidReqData, quote("userID not exist or less than 1"))
	}

	ret, err := ac.ac.GetUserLiveInfo(userID)
	if err != nil {
		debug("getUserLiveInfo() error: %v", err)
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getUserLiveInfo() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getUserLiveInfoType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getUserLiveInfoType, quote(reqID), string(data))
}

func (ac *acLive) getMedalDetail(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		debug("getMedalDetail() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetMedalDetail(liverUID)
	if err != nil {
		debug("getMedalDetail() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getMedalDetail() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalDetailType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalDetailType, quote(reqID), string(data))
}

func (ac *acLive) getMedalList(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		debug("getMedalList() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getMedalListType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetMedalList(liverUID)
	if err != nil {
		debug("getMedalList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getMedalList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalListType, quote(reqID), string(data))
}

func (ac *acLive) getMedalRankList(v *fastjson.Value, reqID string) string {
	liverUID := v.GetInt64("data", "liverUID")
	if liverUID <= 0 {
		debug("getMedalRankList() error: liverUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), invalidReqData, quote("liverUID not exist or less than 1"))
	}

	ret, err := ac.ac.GetMedalRankList(liverUID)
	if err != nil {
		debug("getMedalRankList() error: %v", err)
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getMedalRankList() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getMedalRankListType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getMedalRankListType, quote(reqID), string(data))
}

func (ac *acLive) getUserMedal(v *fastjson.Value, reqID string) string {
	userID := v.GetInt64("data", "userID")
	if userID <= 0 {
		debug("getUserMedal() error: userID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), invalidReqData, quote("userID not exist or less than 1"))
	}

	ret, err := acfundanmu.GetUserMedal(userID)
	if err != nil {
		debug("getUserMedal() error: %v", err)
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	data, err := json.Marshal(ret)
	if err != nil {
		debug("getUserMedal() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, getUserMedalType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respJSON, getUserMedalType, quote(reqID), string(data))
}

func (ac *acLive) addManager(v *fastjson.Value, reqID string) string {
	managerUID := v.GetInt64("data", "managerUID")
	if managerUID <= 0 {
		debug("addManager() error: managerUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, addManagerType, quote(reqID), invalidReqData, quote("managerUID not exist or less than 1"))
	}

	err := ac.ac.AddManager(managerUID)
	if err != nil {
		debug("addManager() error: %v", err)
		return fmt.Sprintf(respErrJSON, addManagerType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, addManagerType, quote(reqID))
}

func (ac *acLive) deleteManager(v *fastjson.Value, reqID string) string {
	managerUID := v.GetInt64("data", "managerUID")
	if managerUID <= 0 {
		debug("deleteManager() error: managerUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, deleteManagerType, quote(reqID), invalidReqData, quote("managerUID not exist or less than 1"))
	}

	err := ac.ac.DeleteManager(managerUID)
	if err != nil {
		debug("deleteManager() error: %v", err)
		return fmt.Sprintf(respErrJSON, deleteManagerType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, deleteManagerType, quote(reqID))
}

func (ac *acLive) managerKick(v *fastjson.Value, reqID string) string {
	kickedUID := v.GetInt64("data", "kickedUID")
	if kickedUID <= 0 {
		debug("managerKick() error: kickedUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, managerKickType, quote(reqID), invalidReqData, quote("kickedUID not exist or less than 1"))
	}

	err := ac.ac.ManagerKick(kickedUID)
	if err != nil {
		debug("managerKick() error: %v", err)
		return fmt.Sprintf(respErrJSON, managerKickType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, managerKickType, quote(reqID))
}

func (ac *acLive) authorKick(v *fastjson.Value, reqID string) string {
	kickedUID := v.GetInt64("data", "kickedUID")
	if kickedUID <= 0 {
		debug("authorKick() error: kickedUID not exist or less than 1")
		return fmt.Sprintf(respErrJSON, authorKickType, quote(reqID), invalidReqData, quote("kickedUID not exist or less than 1"))
	}

	err := ac.ac.AuthorKick(kickedUID)
	if err != nil {
		debug("authorKick() error: %v", err)
		return fmt.Sprintf(respErrJSON, authorKickType, quote(reqID), reqHandleErr, quote(err.Error()))
	}

	return fmt.Sprintf(respNoDataJSON, authorKickType, quote(reqID))
}

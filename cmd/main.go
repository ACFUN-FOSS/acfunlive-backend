package main

import (
	"flag"
	"log"
	"os"
	"strings"
)

const header = `// Code generated by github.com/ACFUN-FOSS/acfunlive-backend/cmd . DO NOT EDIT.
package main

import (
	"fmt"

	"github.com/orzogc/acfundanmu"
	"github.com/segmentio/encoding/json"
	"github.com/valyala/fastjson"
)
`

const noParamFunc = `
func (ac *acLive) __FUNC__(v *fastjson.Value, reqID string) string {` + callNoParamFunc + jsonMarshal + dataReturn

const singleStringFunc = `
func (ac *acLive) __FUNC__(v *fastjson.Value, reqID string) string {
	__PARAM__ := string(v.GetStringBytes("data", "__PARAM__"))
	if __PARAM__ == "" {
		debug("__FUNC__() error: No __PARAM__")
		return fmt.Sprintf(respErrJSON, __FUNCType__, quote(reqID), invalidReqData, quote("Need __PARAM__"))
	}
` + callSingleFunc + jsonMarshal + dataReturn

const singleInt64Func = `
func (ac *acLive) __FUNC__(v *fastjson.Value, reqID string) string {
	__PARAM__ := v.GetInt64("data", "__PARAM__")
	if __PARAM__ <= 0 {
		debug("__FUNC__() error: __PARAM__ not exist or less than 1")
		return fmt.Sprintf(respErrJSON, __FUNCType__, quote(reqID), invalidReqData, quote("__PARAM__ not exist or less than 1"))
	}
` + callSingleFunc + jsonMarshal + dataReturn

const singleInt64NoDataFunc = `
func (ac *acLive) __FUNC__(v *fastjson.Value, reqID string) string {
	__PARAM__ := v.GetInt64("data", "__PARAM__")
	if __PARAM__ <= 0 {
		debug("__FUNC__() error: __PARAM__ not exist or less than 1")
		return fmt.Sprintf(respErrJSON, __FUNCType__, quote(reqID), invalidReqData, quote("__PARAM__ not exist or less than 1"))
	}
` + callNoDataFunc + noDataReturn

const callNoParamFunc = `
	ret, err := __CALLFUNC__()` + callFuncErrHandle

const callSingleFunc = `
	ret, err := __CALLFUNC__(__PARAM__)` + callFuncErrHandle

const callNoDataFunc = `
	err := __CALLFUNC__(__PARAM__)` + callFuncErrHandle

const callFuncErrHandle = `
	if err != nil {
		debug("__FUNC__() error: %v", err)
		return fmt.Sprintf(respErrJSON, __FUNCType__, quote(reqID), reqHandleErr, quote(err.Error()))
	}
`

const jsonMarshal = `
	data, err := json.Marshal(ret)
	if err != nil {
		debug("__FUNC__() error: cannot marshal to json: %+v", ret)
		return fmt.Sprintf(respErrJSON, __FUNCType__, quote(reqID), reqHandleErr, quote(err.Error()))
	}
`

const dataReturn = `
	return fmt.Sprintf(respJSON, __FUNCType__, quote(reqID), string(data))
}
`

const noDataReturn = `
	return fmt.Sprintf(respNoDataJSON, __FUNCType__, quote(reqID))
}
`

// 函数名，函数分类，调用的库函数
var noParam = [][]string{
	{"getAllLiveList", "getAllLiveListType", "ac.ac.GetAllLiveList"},
	{"getManagerList", "getManagerListType", "ac.ac.GetManagerList"},
}

// 函数名，函数分类，调用的库函数，参数
var singleString = [][]string{
	{"getWatchingList", "getWatchingListType", "ac.ac.GetWatchingListWithLiveID", "liveID"},
	{"getSummary", "getSummaryType", "ac.ac.GetSummaryWithLiveID", "liveID"},
	{"getPlayback", "getPlaybackType", "ac.ac.GetPlayback", "liveID"},
}

// 函数名，函数分类，调用的库函数，参数
var singleInt64 = [][]string{
	{"getBillboard", "getBillboardType", "ac.ac.GetBillboard", "liverUID"},
	{"getUserLiveInfo", "getUserLiveInfoType", "ac.ac.GetUserLiveInfo", "userID"},
	{"getMedalDetail", "getMedalDetailType", "ac.ac.GetMedalDetail", "liverUID"},
	{"getMedalList", "getMedalListType", "ac.ac.GetMedalList", "liverUID"},
	{"getMedalRankList", "getMedalRankListType", "ac.ac.GetMedalRankList", "liverUID"},
	{"getUserMedal", "getUserMedalType", "acfundanmu.GetUserMedal", "userID"},
}

// 函数名，函数分类，调用的库函数，参数
var singleInt64NoData = [][]string{
	{"addManager", "addManagerType", "ac.ac.AddManager", "managerUID"},
	{"deleteManager", "deleteManagerType", "ac.ac.DeleteManager", "managerUID"},
	{"managerKick", "managerKickType", "ac.ac.ManagerKick", "kickedUID"},
	{"authorKick", "authorKickType", "ac.ac.AuthorKick", "kickedUID"},
}

func main() {
	output := flag.String("o", "", "output Go file")
	flag.Parse()
	if *output == "" {
		log.Panicln("Need -o to specify output Go file")
	}

	file, err := os.Create(*output)
	if err != nil {
		log.Panicf("Cannot create %s", *output)
	}
	defer file.Close()

	_, err = file.WriteString(header)
	if err != nil {
		log.Panicf("Cannot write content to %s", *output)
	}
	for _, s := range noParam {
		f := strings.ReplaceAll(noParamFunc, "__FUNC__", s[0])
		f = strings.ReplaceAll(f, "__FUNCType__", s[1])
		f = strings.ReplaceAll(f, "__CALLFUNC__", s[2])
		_, err = file.WriteString(f)
		if err != nil {
			log.Panicf("Cannot write content to %s", *output)
		}
	}
	for _, s := range singleString {
		f := strings.ReplaceAll(singleStringFunc, "__FUNC__", s[0])
		f = strings.ReplaceAll(f, "__FUNCType__", s[1])
		f = strings.ReplaceAll(f, "__CALLFUNC__", s[2])
		f = strings.ReplaceAll(f, "__PARAM__", s[3])
		_, err = file.WriteString(f)
		if err != nil {
			log.Panicf("Cannot write content to %s", *output)
		}
	}
	for _, s := range singleInt64 {
		f := strings.ReplaceAll(singleInt64Func, "__FUNC__", s[0])
		f = strings.ReplaceAll(f, "__FUNCType__", s[1])
		f = strings.ReplaceAll(f, "__CALLFUNC__", s[2])
		f = strings.ReplaceAll(f, "__PARAM__", s[3])
		_, err = file.WriteString(f)
		if err != nil {
			log.Panicf("Cannot write content to %s", *output)
		}
	}
	for _, s := range singleInt64NoData {
		f := strings.ReplaceAll(singleInt64NoDataFunc, "__FUNC__", s[0])
		f = strings.ReplaceAll(f, "__FUNCType__", s[1])
		f = strings.ReplaceAll(f, "__CALLFUNC__", s[2])
		f = strings.ReplaceAll(f, "__PARAM__", s[3])
		_, err = file.WriteString(f)
		if err != nil {
			log.Panicf("Cannot write content to %s", *output)
		}
	}
}
